{"ast":null,"code":"const minLength = length => {\n  length = Number(length);\n  return value => {\n    let isError = false;\n\n    if (value.length < length) {\n      isError = true;\n    }\n\n    return isError;\n  };\n};\n\nconst email = value => {\n  let isError = false;\n\n  if (!value.match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\n    isError = true;\n  }\n\n  return isError;\n};\n\nconst sameAs = key => (value, allValues) => {\n  let isError = false;\n\n  if (value !== allValues[key]) {\n    isError = true;\n  }\n\n  return isError;\n};\n\nexport default (string => {\n  const validateBy = string.split(':');\n\n  switch (validateBy[0]) {\n    case 'minLength':\n      return minLength(validateBy[1]);\n\n    case 'email':\n      return email;\n\n    case 'sameAs':\n      return sameAs(validateBy[1]);\n\n    default:\n      console.log(`\"${string}\" IS WRONG VALIDATE TYPE !!! THIS INPUT WONT BE VALIDATE`);\n      return () => false;\n  }\n});","map":{"version":3,"sources":["C:/Users/monik/Desktop/it-learning/src/components/Form/basicValidates.js"],"names":["minLength","length","Number","value","isError","email","match","sameAs","key","allValues","string","validateBy","split","console","log"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,MAAM,IAAI;AAC1BA,EAAAA,MAAM,GAAGC,MAAM,CAACD,MAAD,CAAf;AACA,SAAOE,KAAK,IAAI;AACd,QAAIC,OAAO,GAAG,KAAd;;AACA,QAAID,KAAK,CAACF,MAAN,GAAeA,MAAnB,EAA2B;AACzBG,MAAAA,OAAO,GAAG,IAAV;AACD;;AACD,WAAOA,OAAP;AACD,GAND;AAOD,CATD;;AAWA,MAAMC,KAAK,GAAGF,KAAK,IAAI;AACrB,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAI,CAACD,KAAK,CAACG,KAAN,CAAY,sJAAZ,CAAL,EAA0K;AACxKF,IAAAA,OAAO,GAAG,IAAV;AACD;;AACD,SAAOA,OAAP;AACD,CAND;;AAQA,MAAMG,MAAM,GAAGC,GAAG,IAAI,CAACL,KAAD,EAAQM,SAAR,KAAsB;AAC1C,MAAIL,OAAO,GAAG,KAAd;;AACA,MAAID,KAAK,KAAKM,SAAS,CAACD,GAAD,CAAvB,EAA8B;AAC5BJ,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED,SAAOA,OAAP;AACD,CAPD;;AASA,gBAAgBM,MAAD,IAAY;AACzB,QAAMC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAnB;;AAEA,UAAQD,UAAU,CAAC,CAAD,CAAlB;AACE,SAAK,WAAL;AACE,aAAOX,SAAS,CAACW,UAAU,CAAC,CAAD,CAAX,CAAhB;;AACF,SAAK,OAAL;AACE,aAAON,KAAP;;AACF,SAAK,QAAL;AACE,aAAOE,MAAM,CAACI,UAAU,CAAC,CAAD,CAAX,CAAb;;AACF;AACEE,MAAAA,OAAO,CAACC,GAAR,CAAa,IAAGJ,MAAO,0DAAvB;AACA,aAAO,MAAM,KAAb;AATJ;AAWD,CAdD","sourcesContent":["const minLength = length => {\n  length = Number(length)\n  return value => {\n    let isError = false\n    if (value.length < length) {\n      isError = true\n    }\n    return isError\n  }\n}\n\nconst email = value => {\n  let isError = false\n  if (!value.match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\n    isError = true\n  }\n  return isError\n}\n\nconst sameAs = key => (value, allValues) => {\n  let isError = false\n  if (value !== allValues[key]) {\n    isError = true\n  }\n\n  return isError\n}\n\nexport default (string) => {\n  const validateBy = string.split(':')\n\n  switch (validateBy[0]) {\n    case 'minLength':\n      return minLength(validateBy[1])\n    case 'email':\n      return email\n    case 'sameAs':\n      return sameAs(validateBy[1])\n    default:\n      console.log(`\"${string}\" IS WRONG VALIDATE TYPE !!! THIS INPUT WONT BE VALIDATE`)\n      return () => false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}